#!/usr/bin/python3

# Copyright Â© 2014-2016 mutantmonkey <mutantmonkey@mutantmonkey.in>
# This program is free software. It comes without any warranty, to
# the extent permitted by applicable law. You can redistribute it
# and/or modify it under the terms of the Do What The Fuck You Want
# To Public License, Version 2, as published by Sam Hocevar. See
# the COPYING file for more details.

import argparse
import asyncore
import asynchat
import binascii
import shlex
import socket


class TorControlProxyHandler(asynchat.async_chat):
    authenticated = False

    def __init__(self, control_socket, auth_cookie_path, socks_port=9150, allow_add_onion=False, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.control_socket_path = control_socket
        self.auth_cookie_path = auth_cookie_path
        self.socks_port = socks_port
        self.allow_add_onion = allow_add_onion

        self.ibuffer = []
        self.set_terminator(b"\n")
        self.control_socket = None
        self.proxy_authenticated = False
        self.control_authenticated = False

    def collect_incoming_data(self, data):
        """Buffer the data."""
        self.ibuffer.append(data)

    def found_terminator(self):
        data = b"".join(self.ibuffer).decode('ascii')
        self.ibuffer = []
        command = shlex.split(data)

        if len(command) < 1:
            return
        else:
            print(command)

        if command[0].lower() == 'authenticate':
            # we do the authentication later, as it's not needed yet
            self.proxy_authenticated = True
            self.send_reply(250, 'OK')
        elif command[0].lower() == 'protocolinfo':
            self.pass_message(' '.join(command))
        elif command[0].lower() == 'quit':
            self.send_reply(250, 'closing connection')
            self.close()
        elif self.proxy_authenticated:
            if self.allow_add_onion and command[0].lower() == 'add_onion':
                self.pass_message(' '.join(command))
            elif self.allow_add_onion and command[0].lower() == 'del_onion':
                self.pass_message(' '.join(command))
            elif command[0].lower() == 'getconf':
                conf_key = self.get_next_argument(command)
                if conf_key.lower() == 'disablenetwork':
                    self.pass_message('GETCONF DisableNetwork')
                else:
                    self.send_reply(
                        552,
                        "Unrecognized configuration key \"{}\"".format(conf_key))
            elif command[0].lower() == 'getinfo':
                info_key = self.get_next_argument(command)
                if info_key == 'net/listeners/socks':
                    # send a fake response to make TBB happy
                    self.push('250-net/listeners/socks="{0}:{1}"\r\n'.format(
                        self.socket.getsockname()[0],
                        self.socks_port).encode('utf-8'))
                    self.send_reply(250, 'OK')
                elif info_key in ('status/bootstrap-phase', 'status/circuit-established'):
                    self.pass_message('GETINFO {}'.format(info_key))
                else:
                    self.send_reply(
                        510,
                        'Unrecognized key "{}"'.format(info_key))
            elif command[0].lower() == 'setevents':
                event_key = self.get_next_argument(command)
                if event_key.lower() == 'status_client':
                    self.pass_message('SETEVENTS STATUS_CLIENT')
                else:
                    self.send_reply(
                        552,
                        "Unrecognized event \"{}\"".format(event_key))
            elif command[0].lower() == 'signal':
                signal_code = self.get_next_argument(command)
                if signal_code.lower() == 'newnym':
                    self.pass_message('SIGNAL NEWNYM')
                else:
                    self.send_reply(
                        552,
                        'Unrecognized signal code "{}"'.format(signal_code))
            else:
                self.send_reply(
                    510,
                    'Unrecognized command "{}"'.format(command[0]))
        else:
            self.send_reply(514, 'Authentication required.')

    def handle_close(self):
        if self.control_socket is not None:
            self.control_socket.close()

        super().handle_close()

    def close(self):
        super().close()

    @staticmethod
    def get_next_argument(command):
        if len(command) > 1:
            return command[1]
        else:
            return ""

    def create_control_socket(self):
        self.control_socket = TorControlSocket(self.control_socket_path)

    def authenticate(self):
        # read auth cookie
        with open(self.auth_cookie_path, 'rb') as f:
            auth_cookie = f.read(32)
            hex_cookie = str(binascii.hexlify(auth_cookie), 'ascii')

        result = self.control_socket.send_command(
            "AUTHENTICATE {}\n".format(hex_cookie))
        if result[0:6] != b"250 OK":
            self.push(result)
            self.control_socket.close()
            self.control_socket = None
            return False

        return True

    def pass_message(self, msg):
        if self.control_socket is None:
            self.create_control_socket()

        if self.control_authenticated is False:
            self.control_authenticated = self.authenticate()
            if self.control_authenticated is False:
                self.close()
                return

        result = self.control_socket.send_command(msg)
        self.push(result)

    def send_reply(self, code, msg):
        out = "{0} {1}\r\n".format(code, msg)
        self.push(out.encode('utf-8'))


class TorControlSocket(object):
    def __init__(self, path):
        self.socket = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        self.socket.settimeout(10.0)
        self.socket.connect(path)

    def send_command(self, msg):
        self.socket.send("{}\r\n".format(msg).encode('utf-8'))
        return self.socket.recv(16384)

    def close(self):
        self.socket.close()


class TorControlProxyServer(asyncore.dispatcher):
    def __init__(self, host, port, socks_port,
                 control_socket="/run/tor/control",
                 auth_cookie_path="/run/tor/control.authcookie",
                 allow_add_onion=False):
        super().__init__()

        self.socks_port = socks_port
        self.control_socket = control_socket
        self.auth_cookie_path = auth_cookie_path
        self.allow_add_onion = allow_add_onion

        self.create_socket()
        self.set_reuse_addr()
        self.bind((host, port))
        self.listen(5)

    def handle_accepted(self, sock, addr):
        print("Got connection from {}".format(addr))
        handler = TorControlProxyHandler(self.control_socket,
                                         self.auth_cookie_path,
                                         self.socks_port,
                                         self.allow_add_onion,
                                         sock)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Whitelisting proxy for the Tor control port")
    parser.add_argument(
        "--port", "-p", default=9151, type=int,
        help="The TCP port to run the proxy on; default 9151")
    parser.add_argument(
        "--socksport", "-s", default=9150, type=int,
        help="The value for SocksPort to report to clients; default 9150")
    parser.add_argument(
        "--allow-add-onion", action='store_true',
        help="Allow ADD_ONION and DEL_ONION commands. Note that someone can create a onion service that connects to your actual control port and bypass the filter.")
    args = parser.parse_args()

    server = TorControlProxyServer('0.0.0.0', args.port,
                                   socks_port=args.socksport,
                                   allow_add_onion=args.allow_add_onion)
    asyncore.loop()
